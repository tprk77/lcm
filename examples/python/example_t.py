"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class example_t:
    __slots__ = ("timestamp", "position", "orientation", "num_ranges", "ranges")

    def __init__(self):
        self.timestamp = 0
        self.position = []
        self.orientation = []
        self.num_ranges = 0
        self.ranges = []

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(example_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write (struct.pack(">q", self.timestamp))
        for i0 in range(3):
            buf.write(struct.pack('>d', self.position[i0]))
        for i0 in range(4):
            buf.write(struct.pack('>d', self.orientation[i0]))
        buf.write (struct.pack(">i", self.num_ranges))
        for i0 in range(self.num_ranges):
            buf.write(struct.pack('>h', self.ranges[i0]))

    def decode(data):
        if hasattr (data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != example_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return example_t._decode_one (buf)
    decode = staticmethod (decode)

    def _decode_one(buf):
        self = example_t()

        self.timestamp = struct.unpack('>q', buf.read(8))[0]
        self.position = []
        for i0 in range(3):
            self.position.append(struct.unpack('>d', buf.read(8))[0])
        self.orientation = []
        for i0 in range(4):
            self.orientation.append(struct.unpack('>d', buf.read(8))[0])
        self.num_ranges = struct.unpack('>i', buf.read(4))[0]
        self.ranges = []
        for i0 in range(self.num_ranges):
            self.ranges.append(struct.unpack('>h', buf.read(2))[0])
        return self
    _decode_one = staticmethod (_decode_one)

    _hash = None
    def _get_hash_recursive (parents):
        if example_t in parents: return 0
        newparents = parents + [example_t]
        tmphash = (0x9eb95d2c2f66b618) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff 
        return tmphash
    _get_hash_recursive=staticmethod(_get_hash_recursive)
    _packed_fingerprint = None
    
    def _get_packed_fingerprint():
        if example_t._packed_fingerprint is None:
            example_t._packed_fingerprint = struct.pack(">Q", example_t._get_hash_recursive([]))
        return example_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

